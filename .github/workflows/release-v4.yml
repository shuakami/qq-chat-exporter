name: "QCE V4 Release"

on:
  push:
    tags:
      - "v4.*"
      - "v*"

permissions: write-all

jobs:
  Build-QCE-V4-Multi-Platform:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: Linux
            arch: x64
            ext: ""
            shell: "bash"
          - os: windows-latest
            platform: Windows
            arch: x64
            ext: ".bat"
            shell: "cmd"
          - os: macos-13
            platform: macOS
            arch: x64
            ext: ""
            shell: "bash"
          - os: macos-latest
            platform: macOS
            arch: arm64
            ext: ""
            shell: "bash"
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Clone Main Repository
        uses: actions/checkout@v4
      
      - name: Use Node.js 20.X
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
      
      # 设置 pnpm（NextJS项目需要）
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
      
      # Unix系统构建 (Linux/macOS)
      - name: Build QCE V4 (Unix)
        if: matrix.shell == 'bash'
        env:
          NODE_OPTIONS: "--max-old-space-size=4096"
        run: |
          echo "🚀 Building QCE V4 for ${{ matrix.platform }}-${{ matrix.arch }}"
          
          # 构建 QCE V4 工具前端
          echo "📦 Building QCE V4 Tool frontend..."
          cd qce-v4-tool
          pnpm install
          NODE_ENV=production pnpm run build
          cd ..
          
          # 构建 NapCat 主体
          echo "📦 Building NapCat..."
          cd NapCatQQ
          npm install
          cd napcat.webui && npm install --force && cd ..
          npm run build:universal
          cd dist && npm install --omit=dev && cd ..
          echo "✅ Build completed for ${{ matrix.platform }}"
      
      # 为 macOS 下载并打包 Node.js 运行时
      - name: Bundle Node.js Runtime for macOS
        if: matrix.platform == 'macOS'
        run: |
          echo "📥 下载 Node.js 20 LTS 运行时用于 macOS..."
          cd NapCatQQ/dist
          mkdir -p bin
          
          # 下载 Node.js 20 LTS (arm64)
          echo "⬇️ 下载 Node.js 20 arm64..."
          curl -fsSL https://nodejs.org/dist/v20.18.0/node-v20.18.0-darwin-arm64.tar.gz -o node-arm64.tar.gz
          tar -xzf node-arm64.tar.gz
          cp node-v20.18.0-darwin-arm64/bin/node bin/node-darwin-arm64
          chmod +x bin/node-darwin-arm64
          rm -rf node-arm64.tar.gz node-v20.18.0-darwin-arm64
          
          # 下载 Node.js 20 LTS (x64)
          echo "⬇️ 下载 Node.js 20 x64..."
          curl -fsSL https://nodejs.org/dist/v20.18.0/node-v20.18.0-darwin-x64.tar.gz -o node-x64.tar.gz
          tar -xzf node-x64.tar.gz
          cp node-v20.18.0-darwin-x64/bin/node bin/node-darwin-x64
          chmod +x bin/node-darwin-x64
          rm -rf node-x64.tar.gz node-v20.18.0-darwin-x64
          
          echo "✅ Node.js 运行时已打包："
          ls -lh bin/
          file bin/node-darwin-arm64
          file bin/node-darwin-x64
      
      # Windows构建
      - name: Build QCE V4 (Windows)
        if: matrix.shell == 'cmd'
        env:
          NODE_OPTIONS: "--max-old-space-size=4096"
        run: |
          echo "🚀 Building QCE V4 for Windows-x64"
          
          echo "📦 Building QCE V4 Tool frontend..."
          cd qce-v4-tool
          pnpm install
          set NODE_ENV=production && pnpm run build
          cd ..
          
          echo "📦 Building NapCat..."
          cd NapCatQQ
          npm install
          cd napcat.webui
          npm install --force
          cd ..
          npm run build:universal
          cd dist
          npm install --omit=dev
          cd ..
          echo "✅ Build completed for Windows"
      
      # 创建平台特定的启动脚本
      - name: Create Platform Launcher (Unix)
        if: matrix.shell == 'bash'
        run: |
          cd NapCatQQ/dist
          # 创建Unix启动脚本
          cat > napcat-launcher.sh << 'EOFSCRIPT'
          #!/usr/bin/env bash
          set -euo pipefail
          
          # -------------------------------
          # QQ Chat Exporter - macOS/Linux Launcher (Hardened)
          # Build Platform: ${{ matrix.platform }}-${{ matrix.arch }}
          # -------------------------------
          
          # ---- Logging helpers ----
          log_info()  { printf "\033[1;34m[info]\033[0m %s\n" "$*"; }
          log_warn()  { printf "\033[1;33m[warn]\033[0m %s\n" "$*"; }
          log_error() { printf "\033[1;31m[error]\033[0m %s\n" "$*"; }
          die()       { log_error "$*"; exit 1; }
          
          # ---- Paths ----
          SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
          BIN_DIR="${SCRIPT_DIR}/bin"
          
          # 用户可通过环境变量覆写 QQ 路径
          QQ_BIN_DEFAULT="/Applications/QQ.app/Contents/MacOS/QQ"
          QQ_BIN="${NAPCAT_QQ_PATH:-$QQ_BIN_DEFAULT}"
          
          # NapCat 入口
          NAPCAT_ENTRY="${SCRIPT_DIR}/napcat.mjs"
          
          # ---- Detect platform ----
          if [[ "$OSTYPE" == "darwin"* ]]; then
              PLATFORM="macOS"
          elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
              PLATFORM="Linux"
          else
              PLATFORM="Unix"
          fi
          
          log_info "启动 NapCat QCE V4..."
          log_info "构建平台: ${{ matrix.platform }}-${{ matrix.arch }}"
          log_info "运行平台: ${PLATFORM}"
          log_info "系统架构: $(uname -m)"
          
          # ---- macOS specific handling ----
          if [[ "$PLATFORM" == "macOS" ]]; then
              log_info "🍎 macOS 环境检测..."
              
              # Sanity checks
              [[ -f "$NAPCAT_ENTRY" ]] || die "未找到 NapCat 入口: $NAPCAT_ENTRY"
              
              # Quarantine cleanup (first run)
              if command -v xattr >/dev/null 2>&1; then
                if xattr "$SCRIPT_DIR" 2>/dev/null | grep -q com.apple.quarantine; then
                  log_warn "移除隔离属性（quarantine），以免首次运行被拦截..."
                  xattr -r -d com.apple.quarantine "$SCRIPT_DIR" || true
                fi
              fi
              
              # Detect QQ path
              if [ -n "$NAPCAT_QQ_PATH" ] && [ -f "$NAPCAT_QQ_PATH" ]; then
                  log_info "✅ 使用环境变量指定的QQ路径: $NAPCAT_QQ_PATH"
              else
                  log_info "🔍 正在搜索 QQ.app..."
                  
                  # Try common paths
                  qq_app_paths=(
                      "/Applications/QQ.app"
                      "$HOME/Applications/QQ.app"
                      "/System/Applications/QQ.app"
                  )
                  
                  found=0
                  for app_path in "${qq_app_paths[@]}"; do
                      if [ -d "$app_path" ]; then
                          qq_binary="$app_path/Contents/MacOS/QQ"
                          if [ -f "$qq_binary" ]; then
                              NAPCAT_QQ_PATH="$qq_binary"
                              export NAPCAT_QQ_PATH
                              log_info "✅ 找到 QQ: $NAPCAT_QQ_PATH"
                              found=1
                              break
                          fi
                      fi
                  done
                  
                  # Try mdfind
                  if [[ $found -eq 0 ]] && command -v mdfind >/dev/null 2>&1; then
                      found_app=$(mdfind 'kMDItemCFBundleIdentifier == "com.tencent.qq"' 2>/dev/null | head -n 1)
                      if [ -n "$found_app" ] && [ -d "$found_app" ]; then
                          qq_binary="$found_app/Contents/MacOS/QQ"
                          if [ -f "$qq_binary" ]; then
                              NAPCAT_QQ_PATH="$qq_binary"
                              export NAPCAT_QQ_PATH
                              log_info "✅ 找到 QQ: $NAPCAT_QQ_PATH"
                              found=1
                          fi
                      fi
                  fi
                  
                  if [[ $found -eq 0 ]]; then
                      log_error "❌ 未找到 QQ.app，请："
                      log_error "   1. 确保已安装 QQ for Mac"
                      log_error "   2. 或手动指定路径："
                      log_error "      export NAPCAT_QQ_PATH=\"/Applications/QQ.app/Contents/MacOS/QQ\""
                      log_error "      ./napcat-launcher.sh"
                      exit 1
                  fi
              fi
              
              # Detect archs
              HOST_UNAME="$(uname -m)"
              QQ_FILE_DESC="$(file -b "$NAPCAT_QQ_PATH" 2>/dev/null || echo 'unknown')"
              
              log_info "QQ Binary: ${NAPCAT_QQ_PATH}"
              log_info "QQ File:   ${QQ_FILE_DESC}"
              
              # Bundled Node candidates
              NODE_ARM64="${BIN_DIR}/node-darwin-arm64"
              NODE_X64="${BIN_DIR}/node-darwin-x64"
              
              # Rosetta availability (only on Apple Silicon)
              ROSETTA_OK=0
              if [[ "$HOST_UNAME" == "arm64" ]] && command -v arch >/dev/null 2>&1; then
                if arch -x86_64 /usr/bin/true 2>/dev/null; then
                  ROSETTA_OK=1
                  log_info "Rosetta 2 可用"
                fi
              fi
              
              # Decide runtime strategy
              run_napcat() {
                local runtime_prefix=() node_bin="$1" arch_tag="$2"
              
                # 如果需要 Rosetta，则包一层 arch -x86_64
                if [[ "$arch_tag" == "x64" ]]; then
                  if [[ "$HOST_UNAME" == "arm64" ]]; then
                    [[ $ROSETTA_OK -eq 1 ]] || die "需要 Rosetta 才能运行 x64 Node，但当前系统不可用。请安装 Rosetta。"
                    runtime_prefix=(arch -x86_64)
                  fi
                fi
              
                log_info "使用 Node: ${node_bin} (${arch_tag})"
                "${runtime_prefix[@]}" "$node_bin" -v || die "无法执行 Node: ${node_bin}"
              
                # Node 主版本提示
                local major
                major="$("${runtime_prefix[@]}" "$node_bin" -p "process.version.split('.')[0].slice(1)" 2>/dev/null || echo '0')"
                if [[ "$major" -ne 20 ]]; then
                  log_warn "当前 Node 主版本为 ${major}，建议使用 20 以获得最佳兼容性。"
                fi
              
                # 实际启动
                log_info "🚀 启动 NapCat..."
                "${runtime_prefix[@]}" "$node_bin" "$NAPCAT_ENTRY" "$@"
              }
              
              # Try run with bundled node first
              if [[ "$HOST_UNAME" == "arm64" ]]; then
                if [[ "${NAPCAT_FORCE_X64:-0}" -eq 1 ]]; then
                  [[ -x "$NODE_X64" ]] || die "已强制 x64，但缺少 ${NODE_X64}"
                  run_napcat "$NODE_X64" "x64" "$@"
                  exit 0
                fi
              
                if [[ -x "$NODE_ARM64" ]]; then
                  log_info "尝试使用 arm64 随包 Node..."
                  if run_napcat "$NODE_ARM64" "arm64" "$@" 2>&1; then
                    exit 0
                  else
                    log_warn "arm64 Node 启动失败，尝试 x64 (Rosetta)..."
                  fi
                fi
              
                # 回退 Rosetta x64
                if [[ -x "$NODE_X64" ]]; then
                  log_warn "使用 Rosetta x64 Node 以提高 wrapper.node 兼容性..."
                  run_napcat "$NODE_X64" "x64" "$@"
                  exit 0
                fi
              else
                # Intel Mac
                if [[ -x "$NODE_X64" ]]; then
                  run_napcat "$NODE_X64" "x64" "$@"
                  exit 0
                fi
              fi
              
              # Final fallback: system node (not recommended)
              if command -v node >/dev/null 2>&1; then
                log_warn "⚠️  未找到随包 Node，回退使用系统 Node（可能导致 dyld 错误）"
                log_warn "系统 Node 版本: $(node -v)"
                log_warn "系统 Node 架构: $(node -p 'process.arch')"
                log_info "🚀 启动 NapCat..."
                node "$NAPCAT_ENTRY" "$@"
              else
                die "缺少随包 Node，且系统中也未找到 node。请安装 Node 20 或联系开发者。"
              fi
          
          # ---- Linux specific handling ----
          elif [[ "$PLATFORM" == "Linux" ]]; then
              log_info "🐧 Linux 环境检测..."
              
              [[ -f "$NAPCAT_ENTRY" ]] || die "未找到 NapCat 入口: $NAPCAT_ENTRY"
              
              # 检测QQ安装路径
              if [ -f "./resources/app/package.json" ]; then
                  log_info "✅ 检测到在QQ安装目录中运行"
                  QQ_DIR="$(pwd)"
              elif [ -n "$NAPCAT_QQ_PATH" ] && [ -d "$NAPCAT_QQ_PATH" ]; then
                  log_info "✅ 使用环境变量指定的QQ路径: $NAPCAT_QQ_PATH"
                  QQ_DIR="$(dirname "$NAPCAT_QQ_PATH")"
              else
                  log_info "🔍 正在搜索QQ安装路径..."
                  
                  qq_paths=(
                      "/opt/QQ"
                      "/usr/local/bin/qq"
                      "/snap/qq/current"
                      "/var/lib/flatpak/app/com.qq.QQ/current/active/files"
                  )
                  
                  found=0
                  for path in "${qq_paths[@]}"; do
                      if [ -d "$path" ] && [ -f "$path/resources/app/package.json" ]; then
                          QQ_DIR="$path"
                          log_info "✅ 找到QQ安装路径: $QQ_DIR"
                          found=1
                          break
                      fi
                  done
                  
                  if [[ $found -eq 0 ]]; then
                      log_error "❌ 未找到QQ安装，请："
                      log_error "   1. 确保已安装Linux版QQ"
                      log_error "   2. 将NapCat解压到QQ安装目录 (/opt/QQ) 中运行"
                      log_error "   3. 或设置环境变量: export NAPCAT_QQ_PATH=/path/to/qq"
                      exit 1
                  fi
              fi
              
              # 设置动态库搜索路径
              export LD_LIBRARY_PATH="$QQ_DIR/resources/app:$QQ_DIR:${LD_LIBRARY_PATH:-}"
              log_info "📚 设置库路径: $LD_LIBRARY_PATH"
              
              # 切换到QQ目录运行（重要！）
              cd "$QQ_DIR"
              log_info "📁 切换到QQ目录: $(pwd)"
              log_info "🚀 启动 NapCat..."
              
              # Linux 使用系统 Node（因为需要与 QQ 的动态库兼容）
              if command -v node >/dev/null 2>&1; then
                  log_info "Node 版本: $(node -v)"
                  log_info "Node 架构: $(node -p 'process.arch')"
                  node "$SCRIPT_DIR/napcat.mjs" "$@"
              else
                  die "未找到 node 命令，请安装 Node.js 20+"
              fi
          
          # ---- Other Unix ----
          else
              log_info "启动 NapCat (通用 Unix)..."
              [[ -f "$NAPCAT_ENTRY" ]] || die "未找到 NapCat 入口: $NAPCAT_ENTRY"
              
              if command -v node >/dev/null 2>&1; then
                  log_info "Node 版本: $(node -v)"
                  log_info "🚀 启动 NapCat..."
                  node "$NAPCAT_ENTRY" "$@"
              else
                  die "未找到 node 命令，请安装 Node.js"
              fi
          fi
          EOFSCRIPT
          
          chmod +x napcat-launcher.sh
          echo "✅ Created hardened launcher script for ${{ matrix.platform }}-${{ matrix.arch }}"
      
      - name: Create Platform Launcher (Windows)
        if: matrix.shell == 'cmd'
        run: |
          cd NapCatQQ/dist
          # Windows平台已包含原生launcher.bat文件，无需创建额外启动脚本
          echo "✅ Windows platform uses existing launcher.bat files"
          
          echo "✅ Created CLI launcher script for Windows"
      
      - name: Package Distribution (Unix)
        if: matrix.shell == 'bash'
        run: |
          cd NapCatQQ/dist
          # 创建版本信息文件
          cat > VERSION.txt << EOF
          NapCat QCE V4
          Version: ${{ github.ref_name }}
          Platform: ${{ matrix.platform }}-${{ matrix.arch }}
          Build Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          Build Commit: ${{ github.sha }}
          
          Features:
          - QQ Chat Exporter V4
          - Web UI Management
          - Multi-format Export (HTML/JSON/TXT)
          - Resource Management
          - CLI Support
          
          Usage:
          - Linux: 将文件解压到QQ安装目录 (/opt/QQ) 后运行 ./napcat-launcher.sh
          - macOS: 直接运行 ./napcat-launcher.sh  
          - 或设置环境变量: export NAPCAT_QQ_PATH=/path/to/qq
          - Web UI: http://localhost:40653
          - QCE Tool: http://localhost:40653/qce-v4-tool
          EOF
          
          echo "📦 Created version info file"
          ls -la
      
      - name: Package Distribution (Windows)
        if: matrix.shell == 'cmd'
        shell: pwsh
        run: |
          cd NapCatQQ/dist
          "NapCat QCE V4" | Out-File -FilePath VERSION.txt -Encoding UTF8
          "Version: ${{ github.ref_name }}" | Out-File -FilePath VERSION.txt -Append -Encoding UTF8
          "Platform: ${{ matrix.platform }}-${{ matrix.arch }}" | Out-File -FilePath VERSION.txt -Append -Encoding UTF8
          "Build Date: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')" | Out-File -FilePath VERSION.txt -Append -Encoding UTF8
          "Build Commit: ${{ github.sha }}" | Out-File -FilePath VERSION.txt -Append -Encoding UTF8
          "" | Out-File -FilePath VERSION.txt -Append -Encoding UTF8
          "Features:" | Out-File -FilePath VERSION.txt -Append -Encoding UTF8
          "- QQ Chat Exporter V4" | Out-File -FilePath VERSION.txt -Append -Encoding UTF8
          "- Web UI Management" | Out-File -FilePath VERSION.txt -Append -Encoding UTF8
          "- Multi-format Export (HTML/JSON/TXT)" | Out-File -FilePath VERSION.txt -Append -Encoding UTF8
          "- Resource Management" | Out-File -FilePath VERSION.txt -Append -Encoding UTF8
          "- CLI Support" | Out-File -FilePath VERSION.txt -Append -Encoding UTF8
          "" | Out-File -FilePath VERSION.txt -Append -Encoding UTF8
          "Usage:" | Out-File -FilePath VERSION.txt -Append -Encoding UTF8
          "- Run: launcher-user.bat" | Out-File -FilePath VERSION.txt -Append -Encoding UTF8
          "- Web UI: http://localhost:40653" | Out-File -FilePath VERSION.txt -Append -Encoding UTF8
          "- QCE Tool: http://localhost:40653/qce-v4-tool" | Out-File -FilePath VERSION.txt -Append -Encoding UTF8
          
          Write-Output "📦 Created version info file"
          Get-ChildItem
      
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: NapCat.QCE.V4-${{ matrix.platform }}-${{ matrix.arch }}
          path: NapCatQQ/dist

  release-qce-v4:
    needs: [Build-QCE-V4-Multi-Platform]
    runs-on: ubuntu-latest
    steps:
      - name: Clone Main Repository
        uses: actions/checkout@v4

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        
      - name: Extract version from tag
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
      
      - name: Package Releases
        run: |
          echo "📦 Packaging QCE V4 releases..."
          
          # 为每个平台创建压缩包
          for platform_dir in NapCat.QCE.V4-*; do
            if [ -d "$platform_dir" ]; then
              platform_name=$(echo "$platform_dir" | sed 's/NapCat\.QCE\.V4-//')
              echo "Packaging $platform_name..."
              
              cd "$platform_dir"
              if [[ "$platform_name" == *"Windows"* ]]; then
                zip -q -r "../NapCat.QCE.V4-${platform_name}.zip" .
              else
                tar -czf "../NapCat.QCE.V4-${platform_name}.tar.gz" .
              fi
              cd ..
              
              echo "✅ Created package for $platform_name"
            fi
          done
          
          # 创建通用包（所有平台）
          mkdir -p NapCat.QCE.V4-Universal
          cp -r NapCat.QCE.V4-*/* NapCat.QCE.V4-Universal/ 2>/dev/null || true
          cd NapCat.QCE.V4-Universal
          zip -q -r ../NapCat.QCE.V4-Universal.zip .
          cd ..
          
          echo "📋 Available packages:"
          ls -la *.zip *.tar.gz 2>/dev/null || true

      - name: Create Release Notes
        run: |
          cat > CHANGELOG.md << EOF
          # QQ Chat Exporter V4 - Version ${{ env.VERSION }}
          
          ## 下载说明
          
          请根据您的平台选择对应的安装包：
          - **Windows**: \`NapCat.QCE.V4-Windows-x64.zip\`
          - **macOS Apple Silicon (M1/M2/M3)**: \`NapCat.QCE.V4-macOS-arm64.tar.gz\` 
          - **macOS Intel**: \`NapCat.QCE.V4-macOS-x64.tar.gz\`
          - **Linux**: \`NapCat.QCE.V4-Linux-x64.tar.gz\`
          - **通用包**: \`NapCat.QCE.V4-Universal.zip\` (包含所有平台)
          
          ## 快速开始
          
          1. 下载并解压对应平台的安装包
          2. **Linux用户**: 将解压后的文件放入QQ安装目录 (/opt/QQ)
          3. 运行启动脚本：
             - Windows: \`launcher-user.bat\`
             - Linux: 在QQ目录中运行 \`./napcat-launcher.sh\`
             - macOS: \`./napcat-launcher.sh\` (首次运行可能需要移除隔离属性)
          4. 在浏览器中打开 http://localhost:40653
          5. 访问 QCE V4 工具: http://localhost:40653/qce-v4-tool
          
          ### Linux特别说明
          
          **重要**: Linux用户必须将NapCat放在QQ安装目录中运行，或设置环境变量:
          \`\`\`bash
          # 方法1: 解压到QQ目录 (推荐)
          cd /opt/QQ
          tar -xzf NapCat.QCE.V4-Linux-x64.tar.gz
          ./napcat-launcher.sh
          
          # 方法2: 设置环境变量
          export NAPCAT_QQ_PATH=/opt/QQ/qq
          ./napcat-launcher.sh
          \`\`\`
          
          ## 重要声明
          
          本软件完全免费开源！如果您付费购买了此软件，请立即申请退款并举报销售者。
          
          EOF
        
      - name: Create Release Draft and Upload Artifacts
        uses: softprops/action-gh-release@v1
        with:
          name: NapCat QCE V${{ env.VERSION }}
          token: ${{ secrets.GITHUB_TOKEN }}
          body_path: CHANGELOG.md
          files: |
            NapCat.QCE.V4-Windows-x64.zip
            NapCat.QCE.V4-macOS-x64.tar.gz
            NapCat.QCE.V4-macOS-arm64.tar.gz
            NapCat.QCE.V4-Linux-x64.tar.gz
            NapCat.QCE.V4-Universal.zip
          draft: false
          prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
