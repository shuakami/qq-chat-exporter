name: "QCE V4 Release"

on:
  push:
    tags:
      - "v4.*"
      - "v*"

permissions: write-all

jobs:
  Build-QCE-V4-Multi-Platform:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: Linux
            arch: x64
            ext: ""
            shell: "bash"
          - os: windows-latest
            platform: Windows
            arch: x64
            ext: ".bat"
            shell: "cmd"
          - os: macos-13
            platform: macOS
            arch: x64
            ext: ""
            shell: "bash"
          - os: macos-latest
            platform: macOS
            arch: arm64
            ext: ""
            shell: "bash"
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Clone Main Repository
        uses: actions/checkout@v4
      
      - name: Use Node.js 20.X
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
      
      # 设置 pnpm（NextJS项目需要）
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
      
      # Unix系统构建 (Linux/macOS)
      - name: Build QCE V4 (Unix)
        if: matrix.shell == 'bash'
        env:
          NODE_OPTIONS: "--max-old-space-size=4096"
        run: |
          echo "🚀 Building QCE V4 for ${{ matrix.platform }}-${{ matrix.arch }}"
          
          # 构建 QCE V4 工具前端
          echo "📦 Building QCE V4 Tool frontend..."
          cd qce-v4-tool
          pnpm install
          NODE_ENV=production pnpm run build
          cd ..
          
          # 构建 NapCat 主体
          echo "📦 Building NapCat..."
          cd NapCatQQ
          npm install
          cd napcat.webui && npm install --force && cd ..
          npm run build:universal
          cd dist && npm install --omit=dev && cd ..
          echo "✅ Build completed for ${{ matrix.platform }}"
      
      # Windows构建
      - name: Build QCE V4 (Windows)
        if: matrix.shell == 'cmd'
        env:
          NODE_OPTIONS: "--max-old-space-size=4096"
        run: |
          echo "🚀 Building QCE V4 for Windows-x64"
          
          echo "📦 Building QCE V4 Tool frontend..."
          cd qce-v4-tool
          pnpm install
          set NODE_ENV=production && pnpm run build
          cd ..
          
          echo "📦 Building NapCat..."
          cd NapCatQQ
          npm install
          cd napcat.webui
          npm install --force
          cd ..
          npm run build:universal
          cd dist
          npm install --omit=dev
          cd ..
          echo "✅ Build completed for Windows"
      
      # 创建平台特定的启动脚本
      - name: Create Platform Launcher (Unix)
        if: matrix.shell == 'bash'
        run: |
          cd NapCatQQ/dist
          # 创建Unix启动脚本
          cat > napcat-launcher.sh << 'EOF'
          #!/bin/bash
          
          # NapCat QCE V4 Launcher
          # Platform: ${{ matrix.platform }}-${{ matrix.arch }}
          
          set -e  # 遇到错误立即退出
          
          SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
          
          echo "🐱 Starting NapCat QCE V4..."
          echo "Build Platform: ${{ matrix.platform }}-${{ matrix.arch }}"
          echo "Node.js Version: $(node --version)"
          echo "Node.js Arch: $(node -p 'process.arch')"
          echo "System Arch: $(uname -m)"
          echo "NapCat Directory: $SCRIPT_DIR"
          echo ""
          
          # 架构兼容性检查
          check_architecture() {
              local node_arch=$(node -p 'process.arch')
              local system_arch=$(uname -m)
              local build_arch="${{ matrix.arch }}"
              
              # 将系统架构标准化为Node格式
              case "$system_arch" in
                  x86_64) system_arch="x64" ;;
                  aarch64|arm64) system_arch="arm64" ;;
              esac
              
              if [[ "$node_arch" != "$build_arch" ]]; then
                  echo "⚠️  警告：架构不匹配！"
                  echo "   构建架构: $build_arch"
                  echo "   Node 架构: $node_arch"
                  echo "   系统架构: $system_arch"
                  echo ""
                  echo "请下载匹配您系统架构的 NapCat 版本："
                  if [[ "$system_arch" == "arm64" ]]; then
                      echo "   - macOS Apple Silicon (M1/M2/M3): NapCat.QCE.V4-macOS-arm64.tar.gz"
                  else
                      echo "   - macOS Intel: NapCat.QCE.V4-macOS-x64.tar.gz"
                  fi
                  echo ""
                  echo "或使用匹配架构的 Node.js："
                  echo "   arch -$build_arch bash ./napcat-launcher.sh"
                  echo ""
                  read -p "是否继续运行？(y/N) " -n 1 -r
                  echo
                  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                      exit 1
                  fi
              fi
          }
          
          # macOS QQ路径检测
          detect_macos_qq() {
              local qq_app_paths=(
                  "/Applications/QQ.app"
                  "$HOME/Applications/QQ.app"
                  "/System/Applications/QQ.app"
              )
              
              for app_path in "${qq_app_paths[@]}"; do
                  if [ -d "$app_path" ]; then
                      local qq_binary="$app_path/Contents/MacOS/QQ"
                      if [ -f "$qq_binary" ]; then
                          echo "$qq_binary"
                          return 0
                      fi
                  fi
              done
              
              # 使用 mdfind 搜索
              local found_app=$(mdfind 'kMDItemCFBundleIdentifier == "com.tencent.qq"' 2>/dev/null | head -n 1)
              if [ -n "$found_app" ] && [ -d "$found_app" ]; then
                  local qq_binary="$found_app/Contents/MacOS/QQ"
                  if [ -f "$qq_binary" ]; then
                      echo "$qq_binary"
                      return 0
                  fi
              fi
              
              return 1
          }
          
          # 检测QQ安装路径 (Linux)
          detect_linux_qq() {
              local qq_paths=(
                  "/opt/QQ"
                  "/usr/local/bin/qq"
                  "/snap/qq/current"
                  "/var/lib/flatpak/app/com.qq.QQ/current/active/files"
              )
              
              for path in "${qq_paths[@]}"; do
                  if [ -d "$path" ] && [ -f "$path/resources/app/package.json" ]; then
                      echo "$path"
                      return 0
                  fi
              done
              
              return 1
          }
          
          # macOS 特殊处理
          if [[ "$OSTYPE" == "darwin"* ]]; then
              echo "🍎 macOS 环境检测..."
              
              # 架构兼容性检查
              check_architecture
              
              # 检查环境变量
              if [ -n "$NAPCAT_QQ_PATH" ] && [ -f "$NAPCAT_QQ_PATH" ]; then
                  echo "✅ 使用环境变量指定的QQ路径: $NAPCAT_QQ_PATH"
              else
                  echo "🔍 正在搜索 QQ.app..."
                  if NAPCAT_QQ_PATH=$(detect_macos_qq); then
                      echo "✅ 找到 QQ: $NAPCAT_QQ_PATH"
                      export NAPCAT_QQ_PATH
                  else
                      echo "❌ 未找到 QQ.app，请："
                      echo "   1. 确保已安装 QQ for Mac"
                      echo "   2. 或手动指定路径："
                      echo "      export NAPCAT_QQ_PATH=\"/Applications/QQ.app/Contents/MacOS/QQ\""
                      echo "      ./napcat-launcher.sh"
                      exit 1
                  fi
              fi
              
              # 检查 QQ 二进制架构
              if command -v file &> /dev/null && [ -f "$NAPCAT_QQ_PATH" ]; then
                  local qq_arch_info=$(file "$NAPCAT_QQ_PATH")
                  echo "📱 QQ 架构信息: $qq_arch_info"
                  
                  local node_arch=$(node -p 'process.arch')
                  if [[ "$qq_arch_info" == *"arm64"* ]] && [[ "$node_arch" == "x64" ]]; then
                      echo "⚠️  警告：QQ 是 arm64，但 Node 是 x64"
                      echo "   这可能导致原生模块加载失败 (dyld error)"
                      echo "   建议使用 arm64 版本的 NapCat 和 Node.js"
                  elif [[ "$qq_arch_info" == *"x86_64"* ]] && [[ "$node_arch" == "arm64" ]]; then
                      echo "⚠️  警告：QQ 是 x64，但 Node 是 arm64"
                      echo "   这可能导致原生模块加载失败"
                      echo "   建议使用 x64 版本的 NapCat: arch -x86_64 bash ./napcat-launcher.sh"
                  fi
              fi
              
              cd "$SCRIPT_DIR"
              
          # Linux特殊处理
          elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
              echo "🐧 Linux 环境检测..."
              
              # 架构兼容性检查
              check_architecture
              
              # 检查是否在QQ目录中运行
              if [ -f "./resources/app/package.json" ]; then
                  echo "✅ 检测到在QQ安装目录中运行"
                  QQ_DIR="$(pwd)"
              elif [ -n "$NAPCAT_QQ_PATH" ] && [ -d "$NAPCAT_QQ_PATH" ]; then
                  echo "✅ 使用环境变量指定的QQ路径: $NAPCAT_QQ_PATH"
                  QQ_DIR="$(dirname "$NAPCAT_QQ_PATH")"
              else
                  echo "🔍 正在搜索QQ安装路径..."
                  if QQ_DIR=$(detect_linux_qq); then
                      echo "✅ 找到QQ安装路径: $QQ_DIR"
                  else
                      echo "❌ 未找到QQ安装，请："
                      echo "   1. 确保已安装Linux版QQ"
                      echo "   2. 将NapCat解压到QQ安装目录 (/opt/QQ) 中运行"
                      echo "   3. 或设置环境变量: export NAPCAT_QQ_PATH=/path/to/qq"
                      exit 1
                  fi
              fi
              
              # 设置动态库搜索路径
              export LD_LIBRARY_PATH="$QQ_DIR/resources/app:$QQ_DIR:${LD_LIBRARY_PATH:-}"
              echo "📚 设置库路径: $LD_LIBRARY_PATH"
              
              # 切换到QQ目录运行（重要！）
              cd "$QQ_DIR"
              echo "📁 切换到QQ目录: $(pwd)"
          else
              # 其他Unix系统
              cd "$SCRIPT_DIR"
          fi
          
          echo ""
          echo "🚀 启动NapCat..."
          
          # 启动NapCat（带错误捕获）
          if ! node "$SCRIPT_DIR/napcat.mjs" "$@"; then
              exit_code=$?
              echo ""
              echo "❌ NapCat 启动失败 (退出码: $exit_code)"
              
              if [[ "$OSTYPE" == "darwin"* ]]; then
                  echo ""
                  echo "macOS 常见问题排查："
                  echo "1. 架构不匹配 - 确保 Node.js、NapCat 和 QQ 架构一致"
                  echo "   检查命令: node -p 'process.arch' && uname -m"
                  echo "2. 缺少 QQ 路径 - 设置: export NAPCAT_QQ_PATH=\"/Applications/QQ.app/Contents/MacOS/QQ\""
                  echo "3. 权限问题 - 运行: xattr -r -d com.apple.quarantine ."
              elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
                  echo ""
                  echo "Linux 常见问题排查："
                  echo "1. QQ 未安装或路径错误"
                  echo "2. 动态库缺失 - 确保在 QQ 目录中运行"
                  echo "3. 架构不匹配 - 检查: node -p 'process.arch'"
              fi
              
              exit $exit_code
          fi
          EOF
          
          chmod +x napcat-launcher.sh
          echo "✅ Created launcher script for ${{ matrix.platform }}-${{ matrix.arch }}"
      
      - name: Create Platform Launcher (Windows)
        if: matrix.shell == 'cmd'
        run: |
          cd NapCatQQ/dist
          # Windows平台已包含原生launcher.bat文件，无需创建额外启动脚本
          echo "✅ Windows platform uses existing launcher.bat files"
          
          echo "✅ Created CLI launcher script for Windows"
      
      - name: Package Distribution (Unix)
        if: matrix.shell == 'bash'
        run: |
          cd NapCatQQ/dist
          # 创建版本信息文件
          cat > VERSION.txt << EOF
          NapCat QCE V4
          Version: ${{ github.ref_name }}
          Platform: ${{ matrix.platform }}-${{ matrix.arch }}
          Build Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          Build Commit: ${{ github.sha }}
          
          Features:
          - QQ Chat Exporter V4
          - Web UI Management
          - Multi-format Export (HTML/JSON/TXT)
          - Resource Management
          - CLI Support
          
          Usage:
          - Linux: 将文件解压到QQ安装目录 (/opt/QQ) 后运行 ./napcat-launcher.sh
          - macOS: 直接运行 ./napcat-launcher.sh  
          - 或设置环境变量: export NAPCAT_QQ_PATH=/path/to/qq
          - Web UI: http://localhost:40653
          - QCE Tool: http://localhost:40653/qce-v4-tool
          EOF
          
          echo "📦 Created version info file"
          ls -la
      
      - name: Package Distribution (Windows)
        if: matrix.shell == 'cmd'
        shell: pwsh
        run: |
          cd NapCatQQ/dist
          "NapCat QCE V4" | Out-File -FilePath VERSION.txt -Encoding UTF8
          "Version: ${{ github.ref_name }}" | Out-File -FilePath VERSION.txt -Append -Encoding UTF8
          "Platform: ${{ matrix.platform }}-${{ matrix.arch }}" | Out-File -FilePath VERSION.txt -Append -Encoding UTF8
          "Build Date: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')" | Out-File -FilePath VERSION.txt -Append -Encoding UTF8
          "Build Commit: ${{ github.sha }}" | Out-File -FilePath VERSION.txt -Append -Encoding UTF8
          "" | Out-File -FilePath VERSION.txt -Append -Encoding UTF8
          "Features:" | Out-File -FilePath VERSION.txt -Append -Encoding UTF8
          "- QQ Chat Exporter V4" | Out-File -FilePath VERSION.txt -Append -Encoding UTF8
          "- Web UI Management" | Out-File -FilePath VERSION.txt -Append -Encoding UTF8
          "- Multi-format Export (HTML/JSON/TXT)" | Out-File -FilePath VERSION.txt -Append -Encoding UTF8
          "- Resource Management" | Out-File -FilePath VERSION.txt -Append -Encoding UTF8
          "- CLI Support" | Out-File -FilePath VERSION.txt -Append -Encoding UTF8
          "" | Out-File -FilePath VERSION.txt -Append -Encoding UTF8
          "Usage:" | Out-File -FilePath VERSION.txt -Append -Encoding UTF8
          "- Run: launcher-user.bat" | Out-File -FilePath VERSION.txt -Append -Encoding UTF8
          "- Web UI: http://localhost:40653" | Out-File -FilePath VERSION.txt -Append -Encoding UTF8
          "- QCE Tool: http://localhost:40653/qce-v4-tool" | Out-File -FilePath VERSION.txt -Append -Encoding UTF8
          
          Write-Output "📦 Created version info file"
          Get-ChildItem
      
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: NapCat.QCE.V4-${{ matrix.platform }}-${{ matrix.arch }}
          path: NapCatQQ/dist

  release-qce-v4:
    needs: [Build-QCE-V4-Multi-Platform]
    runs-on: ubuntu-latest
    steps:
      - name: Clone Main Repository
        uses: actions/checkout@v4

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        
      - name: Extract version from tag
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
      
      - name: Package Releases
        run: |
          echo "📦 Packaging QCE V4 releases..."
          
          # 为每个平台创建压缩包
          for platform_dir in NapCat.QCE.V4-*; do
            if [ -d "$platform_dir" ]; then
              platform_name=$(echo "$platform_dir" | sed 's/NapCat\.QCE\.V4-//')
              echo "Packaging $platform_name..."
              
              cd "$platform_dir"
              if [[ "$platform_name" == *"Windows"* ]]; then
                zip -q -r "../NapCat.QCE.V4-${platform_name}.zip" .
              else
                tar -czf "../NapCat.QCE.V4-${platform_name}.tar.gz" .
              fi
              cd ..
              
              echo "✅ Created package for $platform_name"
            fi
          done
          
          # 创建通用包（所有平台）
          mkdir -p NapCat.QCE.V4-Universal
          cp -r NapCat.QCE.V4-*/* NapCat.QCE.V4-Universal/ 2>/dev/null || true
          cd NapCat.QCE.V4-Universal
          zip -q -r ../NapCat.QCE.V4-Universal.zip .
          cd ..
          
          echo "📋 Available packages:"
          ls -la *.zip *.tar.gz 2>/dev/null || true

      - name: Create Release Notes
        run: |
          cat > CHANGELOG.md << EOF
          # QQ Chat Exporter V4 - Version ${{ env.VERSION }}
          
          ## 下载说明
          
          请根据您的平台选择对应的安装包：
          - **Windows**: \`NapCat.QCE.V4-Windows-x64.zip\`
          - **macOS Apple Silicon (M1/M2/M3)**: \`NapCat.QCE.V4-macOS-arm64.tar.gz\`
          - **macOS Intel**: \`NapCat.QCE.V4-macOS-x64.tar.gz\`
          - **Linux**: \`NapCat.QCE.V4-Linux-x64.tar.gz\`
          - **通用包**: \`NapCat.QCE.V4-Universal.zip\` (包含所有平台)
          
          ## 快速开始
          
          1. 下载并解压对应平台的安装包
          2. **Linux用户**: 将解压后的文件放入QQ安装目录 (/opt/QQ)
          3. 运行启动脚本：
             - Windows: \`launcher-user.bat\`
             - Linux: 在QQ目录中运行 \`./napcat-launcher.sh\`
             - macOS: \`./napcat-launcher.sh\`
          4. 在浏览器中打开 http://localhost:40653
          5. 访问 QCE V4 工具: http://localhost:40653/qce-v4-tool
          
          ### Linux特别说明
          
          **重要**: Linux用户必须将NapCat放在QQ安装目录中运行，或设置环境变量:
          \`\`\`bash
          # 方法1: 解压到QQ目录 (推荐)
          cd /opt/QQ
          tar -xzf NapCat.QCE.V4-Linux-x64.tar.gz
          ./napcat-launcher.sh
          
          # 方法2: 设置环境变量
          export NAPCAT_QQ_PATH=/opt/QQ/qq
          ./napcat-launcher.sh
          \`\`\`
          
          ## 重要声明
          
          本软件完全免费开源！如果您付费购买了此软件，请立即申请退款并举报销售者。
          
          EOF
        
      - name: Create Release Draft and Upload Artifacts
        uses: softprops/action-gh-release@v1
        with:
          name: NapCat QCE V${{ env.VERSION }}
          token: ${{ secrets.GITHUB_TOKEN }}
          body_path: CHANGELOG.md
          files: |
            NapCat.QCE.V4-Windows-x64.zip
            NapCat.QCE.V4-macOS-x64.tar.gz
            NapCat.QCE.V4-macOS-arm64.tar.gz
            NapCat.QCE.V4-Linux-x64.tar.gz
            NapCat.QCE.V4-Universal.zip
          draft: false
          prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
