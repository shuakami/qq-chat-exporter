name: "QCE V4 Release"

on:
  push:
    tags:
      - "v4.*"
      - "v*"

permissions: write-all

jobs:
  Build-QCE-V4-Multi-Platform:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: Linux
            arch: x64
            ext: ""
            shell: "bash"
          - os: windows-latest
            platform: Windows
            arch: x64
            ext: ".bat"
            shell: "cmd"
          - os: macos-latest
            platform: macOS
            arch: x64
            ext: ""
            shell: "bash"
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Clone Main Repository
        uses: actions/checkout@v4
      
      - name: Use Node.js 20.X
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
      
      # 设置 pnpm（NextJS项目需要）
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
      
      # Unix系统构建 (Linux/macOS)
      - name: Build QCE V4 (Unix)
        if: matrix.shell == 'bash'
        env:
          NODE_OPTIONS: "--max-old-space-size=4096"
        run: |
          echo "🚀 Building QCE V4 for ${{ matrix.platform }}-${{ matrix.arch }}"
          
          # 构建 QCE V4 工具前端
          echo "📦 Building QCE V4 Tool frontend..."
          cd qce-v4-tool
          pnpm install
          NODE_ENV=production pnpm run build
          cd ..
          
          # 构建 NapCat 主体
          echo "📦 Building NapCat..."
          cd NapCatQQ
          npm install
          cd napcat.webui && npm install --force && cd ..
          npm run build:universal
          cd dist && npm install --omit=dev && cd ..
          echo "✅ Build completed for ${{ matrix.platform }}"
      
      # Windows构建
      - name: Build QCE V4 (Windows)
        if: matrix.shell == 'cmd'
        env:
          NODE_OPTIONS: "--max-old-space-size=4096"
        run: |
          echo "🚀 Building QCE V4 for Windows-x64"
          
          echo "📦 Building QCE V4 Tool frontend..."
          cd qce-v4-tool
          pnpm install
          set NODE_ENV=production && pnpm run build
          cd ..
          
          echo "📦 Building NapCat..."
          cd NapCatQQ
          npm install
          cd napcat.webui
          npm install --force
          cd ..
          npm run build:universal
          cd dist
          npm install --omit=dev
          cd ..
          echo "✅ Build completed for Windows"
      
      # 创建平台特定的启动脚本
      - name: Create Platform Launcher (Unix)
        if: matrix.shell == 'bash'
        run: |
          cd NapCatQQ/dist
          # 创建Unix启动脚本
          cat > napcat-launcher.sh << 'EOF'
          #!/bin/bash
          
          # NapCat QCE V4 Launcher
          # Platform: ${{ matrix.platform }}
          
          SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
          cd "$SCRIPT_DIR"
          
          echo "🐱 Starting NapCat QCE V4..."
          echo "Platform: ${{ matrix.platform }}-${{ matrix.arch }}"
          echo "Node.js Version: $(node --version)"
          echo "Working Directory: $PWD"
          echo ""
          
          # 启动NapCat
          node napcat.mjs "$@"
          EOF
          
          chmod +x napcat-launcher.sh
          echo "✅ Created launcher script for ${{ matrix.platform }}"
      
      - name: Create Platform Launcher (Windows)
        if: matrix.shell == 'cmd'
        run: |
          cd NapCatQQ/dist
          # Windows平台已包含原生launcher.bat文件，无需创建额外启动脚本
          echo "✅ Windows platform uses existing launcher.bat files"
          
          echo "✅ Created CLI launcher script for Windows"
      
      - name: Package Distribution (Unix)
        if: matrix.shell == 'bash'
        run: |
          cd NapCatQQ/dist
          # 创建版本信息文件
          cat > VERSION.txt << EOF
          NapCat QCE V4
          Version: ${{ github.ref_name }}
          Platform: ${{ matrix.platform }}-${{ matrix.arch }}
          Build Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          Build Commit: ${{ github.sha }}
          
          Features:
          - QQ Chat Exporter V4
          - Web UI Management
          - Multi-format Export (HTML/JSON/TXT)
          - Resource Management
          - CLI Support
          
          Usage:
          - Run: ./napcat-launcher.sh
          - Web UI: http://localhost:40653
          - QCE Tool: http://localhost:40653/qce-v4-tool
          EOF
          
          echo "📦 Created version info file"
          ls -la
      
      - name: Package Distribution (Windows)
        if: matrix.shell == 'cmd'
        shell: pwsh
        run: |
          cd NapCatQQ/dist
          "NapCat QCE V4" | Out-File -FilePath VERSION.txt -Encoding UTF8
          "Version: ${{ github.ref_name }}" | Out-File -FilePath VERSION.txt -Append -Encoding UTF8
          "Platform: ${{ matrix.platform }}-${{ matrix.arch }}" | Out-File -FilePath VERSION.txt -Append -Encoding UTF8
          "Build Date: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')" | Out-File -FilePath VERSION.txt -Append -Encoding UTF8
          "Build Commit: ${{ github.sha }}" | Out-File -FilePath VERSION.txt -Append -Encoding UTF8
          "" | Out-File -FilePath VERSION.txt -Append -Encoding UTF8
          "Features:" | Out-File -FilePath VERSION.txt -Append -Encoding UTF8
          "- QQ Chat Exporter V4" | Out-File -FilePath VERSION.txt -Append -Encoding UTF8
          "- Web UI Management" | Out-File -FilePath VERSION.txt -Append -Encoding UTF8
          "- Multi-format Export (HTML/JSON/TXT)" | Out-File -FilePath VERSION.txt -Append -Encoding UTF8
          "- Resource Management" | Out-File -FilePath VERSION.txt -Append -Encoding UTF8
          "- CLI Support" | Out-File -FilePath VERSION.txt -Append -Encoding UTF8
          "" | Out-File -FilePath VERSION.txt -Append -Encoding UTF8
          "Usage:" | Out-File -FilePath VERSION.txt -Append -Encoding UTF8
          "- Run: launcher-user.bat" | Out-File -FilePath VERSION.txt -Append -Encoding UTF8
          "- Web UI: http://localhost:40653" | Out-File -FilePath VERSION.txt -Append -Encoding UTF8
          "- QCE Tool: http://localhost:40653/qce-v4-tool" | Out-File -FilePath VERSION.txt -Append -Encoding UTF8
          
          Write-Output "📦 Created version info file"
          Get-ChildItem
      
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: NapCat.QCE.V4-${{ matrix.platform }}-${{ matrix.arch }}
          path: NapCatQQ/dist

  release-qce-v4:
    needs: [Build-QCE-V4-Multi-Platform]
    runs-on: ubuntu-latest
    steps:
      - name: Clone Main Repository
        uses: actions/checkout@v4

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        
      - name: Extract version from tag
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
      
      - name: Package Releases
        run: |
          echo "📦 Packaging QCE V4 releases..."
          
          # 为每个平台创建压缩包
          for platform_dir in NapCat.QCE.V4-*; do
            if [ -d "$platform_dir" ]; then
              platform_name=$(echo "$platform_dir" | sed 's/NapCat\.QCE\.V4-//')
              echo "Packaging $platform_name..."
              
              cd "$platform_dir"
              if [[ "$platform_name" == *"Windows"* ]]; then
                zip -q -r "../NapCat.QCE.V4-${platform_name}.zip" .
              else
                tar -czf "../NapCat.QCE.V4-${platform_name}.tar.gz" .
              fi
              cd ..
              
              echo "✅ Created package for $platform_name"
            fi
          done
          
          # 创建通用包（所有平台）
          mkdir -p NapCat.QCE.V4-Universal
          cp -r NapCat.QCE.V4-*/* NapCat.QCE.V4-Universal/ 2>/dev/null || true
          cd NapCat.QCE.V4-Universal
          zip -q -r ../NapCat.QCE.V4-Universal.zip .
          cd ..
          
          echo "📋 Available packages:"
          ls -la *.zip *.tar.gz 2>/dev/null || true

      - name: Create Release Notes
        run: |
          cat > CHANGELOG.md << EOF
          # QQ Chat Exporter V4 - Version ${{ env.VERSION }}
          
          ## 下载说明
          
          请根据您的平台选择对应的安装包：
          - **Windows**: \`NapCat.QCE.V4-Windows-x64.zip\`
          - **macOS**: \`NapCat.QCE.V4-macOS-x64.tar.gz\`
          - **Linux**: \`NapCat.QCE.V4-Linux-x64.tar.gz\`
          - **通用包**: \`NapCat.QCE.V4-Universal.zip\` (包含所有平台)
          
          ## 快速开始
          
          1. 下载并解压对应平台的安装包
          2. 运行启动脚本：
             - Windows: \`launcher-user.bat\`
             - Unix: \`./napcat-launcher.sh\`
          3. 在浏览器中打开 http://localhost:40653
          4. 访问 QCE V4 工具: http://localhost:40653/qce-v4-tool
          
          ## 重要声明
          
          本软件完全免费开源！如果您付费购买了此软件，请立即申请退款并举报销售者。
          
          EOF
        
      - name: Create Release Draft and Upload Artifacts
        uses: softprops/action-gh-release@v1
        with:
          name: NapCat QCE V${{ env.VERSION }}
          token: ${{ secrets.GITHUB_TOKEN }}
          body_path: CHANGELOG.md
          files: |
            NapCat.QCE.V4-Windows-x64.zip
            NapCat.QCE.V4-macOS-x64.tar.gz
            NapCat.QCE.V4-Linux-x64.tar.gz
            NapCat.QCE.V4-Universal.zip
          draft: false
          prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
